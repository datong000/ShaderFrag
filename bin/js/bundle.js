var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**This class is automatically generated by LayaAirIDE, please do not make any modifications. */
var GameUI_1 = require("./script/GameUI");
/*
* 游戏初始化配置;
*/
var GameConfig = /** @class */ (function () {
    function GameConfig() {
    }
    GameConfig.init = function () {
        var reg = Laya.ClassUtils.regClass;
        reg("script/GameUI.ts", GameUI_1.default);
    };
    GameConfig.width = 640;
    GameConfig.height = 1136;
    GameConfig.scaleMode = "fixedwidth";
    GameConfig.screenMode = "none";
    GameConfig.alignV = "top";
    GameConfig.alignH = "left";
    GameConfig.startScene = "test/TestScene.scene";
    GameConfig.sceneRoot = "";
    GameConfig.debug = false;
    GameConfig.stat = false;
    GameConfig.physicsDebug = false;
    GameConfig.exportSceneToJson = true;
    return GameConfig;
}());
exports.default = GameConfig;
GameConfig.init();
},{"./script/GameUI":4}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameConfig_1 = require("./GameConfig");
var Main = /** @class */ (function () {
    function Main() {
        //根据IDE设置初始化引擎		
        if (window["Laya3D"])
            Laya3D.init(GameConfig_1.default.width, GameConfig_1.default.height);
        else
            Laya.init(GameConfig_1.default.width, GameConfig_1.default.height, Laya["WebGL"]);
        Laya["Physics"] && Laya["Physics"].enable();
        Laya["DebugPanel"] && Laya["DebugPanel"].enable();
        Laya.stage.scaleMode = GameConfig_1.default.scaleMode;
        Laya.stage.screenMode = GameConfig_1.default.screenMode;
        Laya.stage.alignV = GameConfig_1.default.alignV;
        Laya.stage.alignH = GameConfig_1.default.alignH;
        //兼容微信不支持加载scene后缀场景
        Laya.URL.exportSceneToJson = GameConfig_1.default.exportSceneToJson;
        //打开调试面板（通过IDE设置调试模式，或者url地址增加debug=true参数，均可打开调试面板）
        if (GameConfig_1.default.debug || Laya.Utils.getQueryString("debug") == "true")
            Laya.enableDebugPanel();
        if (GameConfig_1.default.physicsDebug && Laya["PhysicsDebugDraw"])
            Laya["PhysicsDebugDraw"].enable();
        if (GameConfig_1.default.stat)
            Laya.Stat.show();
        Laya.Shader3D.debugMode = true;
        Laya.alertGlobalError = false;
        //激活资源版本控制，version.json由IDE发布功能自动生成，如果没有也不影响后续流程
        Laya.ResourceVersion.enable("version.json", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);
    }
    Main.prototype.onVersionLoaded = function () {
        //激活大小图映射，加载小图的时候，如果发现小图在大图合集里面，则优先加载大图合集，而不是小图
        Laya.AtlasInfoManager.enable("fileconfig.json", Laya.Handler.create(this, this.onConfigLoaded));
    };
    Main.prototype.onConfigLoaded = function () {
        Laya.URL.basePath = "https://cdn.zzzgames.cn/ShaderFrag/";
        //加载IDE指定的场景
        GameConfig_1.default.startScene && Laya.Scene.open(GameConfig_1.default.startScene);
    };
    return Main;
}());
//激活启动类
new Main();
},{"./GameConfig":1}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CtmMat_Frag = /** @class */ (function (_super) {
    __extends(CtmMat_Frag, _super);
    function CtmMat_Frag() {
        var _this = _super.call(this) || this;
        _this.setShaderName("CtmMat_Frag");
        _this.renderMode = Laya.BlinnPhongMaterial.RENDERMODE_OPAQUE;
        return _this;
    }
    Object.defineProperty(CtmMat_Frag.prototype, "DiffsColor", {
        set: function (value) {
            this._shaderValues.setVector(CtmMat_Frag.DiffsColor, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CtmMat_Frag.prototype, "Texture", {
        set: function (value) {
            this._shaderValues.setTexture(CtmMat_Frag.Texture, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CtmMat_Frag.prototype, "NoiseTexture", {
        set: function (value) {
            this._shaderValues.setTexture(CtmMat_Frag.NoiseTexture, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CtmMat_Frag.prototype, "StartTime", {
        set: function (value) {
            this._shaderValues.setNumber(CtmMat_Frag.StartTime, value);
        },
        enumerable: true,
        configurable: true
    });
    CtmMat_Frag.DiffsColor = Laya.Shader3D.propertyNameToID("u_DiffsColor");
    CtmMat_Frag.Texture = Laya.Shader3D.propertyNameToID("u_Texture");
    CtmMat_Frag.NoiseTexture = Laya.Shader3D.propertyNameToID("u_NoiseTexture");
    CtmMat_Frag.StartTime = Laya.Shader3D.propertyNameToID("u_StartTime");
    return CtmMat_Frag;
}(Laya.BlinnPhongMaterial));
exports.CtmMat_Frag = CtmMat_Frag;
var CtmSha_Frag = /** @class */ (function () {
    function CtmSha_Frag() {
    }
    CtmSha_Frag.prototype.init = function () {
        var attributeMap = {
            "a_Position": Laya.VertexMesh.MESH_POSITION0,
            "a_Normal": Laya.VertexMesh.MESH_NORMAL0,
            'a_Texcoord0': Laya.VertexMesh.MESH_TEXTURECOORDINATE0,
            'a_BoneWeights': Laya.VertexMesh.MESH_BLENDWEIGHT0,
            'a_BoneIndices': Laya.VertexMesh.MESH_BLENDINDICES0
        };
        var uniformMap = {
            'u_Bones': Laya.Shader3D.PERIOD_CUSTOM,
            'u_MvpMatrix': Laya.Shader3D.PERIOD_SPRITE,
            'u_WorldMat': Laya.Shader3D.PERIOD_SPRITE,
            'u_Color': Laya.Shader3D.PERIOD_MATERIAL,
            'u_LineWidth': Laya.Shader3D.PERIOD_MATERIAL,
            'u_NoiseTexture': Laya.Shader3D.PERIOD_MATERIAL,
            'u_Time': Laya.Shader3D.PERIOD_SCENE,
            'u_Speed': Laya.Shader3D.PERIOD_MATERIAL,
            'u_MainTex': Laya.Shader3D.PERIOD_MATERIAL,
            'u_Texture': Laya.Shader3D.PERIOD_MATERIAL,
            'u_DissolveState': Laya.Shader3D.PERIOD_MATERIAL,
            'u_StartTime': Laya.Shader3D.PERIOD_MATERIAL,
            'u_DiffsColor': Laya.Shader3D.PERIOD_MATERIAL,
        };
        var stateMap = {
            's_Cull': Laya.Shader3D.RENDER_STATE_CULL,
            's_Blend': Laya.Shader3D.RENDER_STATE_BLEND,
            's_BlendSrc': Laya.Shader3D.RENDER_STATE_BLEND_SRC,
            's_BlendDst': Laya.Shader3D.RENDER_STATE_BLEND_DST,
            's_DepthTest': Laya.Shader3D.RENDER_STATE_DEPTH_TEST,
            's_DepthWrite': Laya.Shader3D.RENDER_STATE_DEPTH_WRITE
        };
        var vs = "\n        #include \"Lighting.glsl\";\n        attribute vec4 a_Position;\n        attribute vec2 a_Texcoord0;\n        attribute vec3 a_Normal;\n        uniform mat4 u_MvpMatrix;\n        uniform mat4 u_WorldMat;\n        varying vec2 v_Texcoord0;\n        varying vec3 v_Normal;\n        uniform float u_Speed;\n\n        #ifdef BONE\n        attribute vec4 a_BoneIndices;\n        attribute vec4 a_BoneWeights;\n        const int c_MaxBoneCount = 24;\n        uniform mat4 u_Bones[c_MaxBoneCount];\n        #endif\n\n        void main()\n        {\n            v_Texcoord0 = a_Texcoord0;\n            #ifdef BONE\n            mat4 skinTransform=mat4(0.0);\n            skinTransform += u_Bones[int(a_BoneIndices.x)] * a_BoneWeights.x;\n            skinTransform += u_Bones[int(a_BoneIndices.y)] * a_BoneWeights.y;\n            skinTransform += u_Bones[int(a_BoneIndices.z)] * a_BoneWeights.z;\n            skinTransform += u_Bones[int(a_BoneIndices.w)] * a_BoneWeights.w;\n            vec4 position = skinTransform * a_Position;\n            gl_Position=u_MvpMatrix * position;\n            mat3 worldMat=mat3(u_WorldMat * skinTransform);\n            #else\n            gl_Position=u_MvpMatrix * a_Position;\n            mat3 worldMat=mat3(u_WorldMat);\n            #endif\n            v_Normal=worldMat*a_Normal;\n            gl_Position=remapGLPositionZ(gl_Position); \n        }\n        ";
        var ps = "\n        #ifdef FSHIGHPRECISION\n        precision highp float;\n        #else\n        precision mediump float;\n        #endif\n        uniform vec4 u_Color;\n        uniform sampler2D u_MainTex;\n        varying vec2 v_Texcoord0;\n        uniform vec4 u_DiffsColor;\n        uniform sampler2D u_Texture;\n        uniform sampler2D u_NoiseTexture;\n        float edgeWidth = 0.01;\n        uniform float u_Time;\n        uniform float u_StartTime;\n        float DissolveSpeed = 5.0;\n        vec4 EdgeColor;\n        vec4 lerp(vec4 from,vec4 to, float t )\n        {\n            t = max(0.0, min(1.0, t));\n            vec4 tmp;\n            tmp.x = from.x + ( to.x - from.x ) * t;\n            tmp.y = from.y + ( to.y - from.y ) * t;\n            tmp.z = from.z + ( to.z - from.z ) * t;\n            tmp.w = from.w + ( to.w - from.w ) * t;\n            return tmp;\n        }\n        float saturate(float x)\n        {\n            return max(0.0, min(1.0, x));\n        }\n        void main()\n        {\n            float DissolveFactor = saturate((u_Time - u_StartTime) / DissolveSpeed);\n            float noiseValue = texture2D(u_NoiseTexture,v_Texcoord0).r;            \n            if(noiseValue <= DissolveFactor)\n            {\n                discard;\n            }\n\n            gl_FragColor = texture2D(u_Texture,v_Texcoord0) * u_DiffsColor;\n        }\n        ";
        var customShader = Laya.Shader3D.add("CtmMat_Frag");
        var subShader = new Laya.SubShader(attributeMap, uniformMap, Laya.SkinnedMeshSprite3D.shaderDefines, Laya.BlinnPhongMaterial.shaderDefines);
        customShader.addSubShader(subShader);
        subShader.addShaderPass(vs, ps, stateMap);
    };
    return CtmSha_Frag;
}());
exports.CtmSha_Frag = CtmSha_Frag;
},{}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("./../ui/layaMaxUI");
var CtmMat_Frag_1 = require("./CtmMat_Frag");
/**
 * 本示例采用非脚本的方式实现，而使用继承页面基类，实现页面逻辑。在IDE里面设置场景的Runtime属性即可和场景进行关联
 * 相比脚本方式，继承式页面类，可以直接使用页面定义的属性（通过IDE内var属性定义），比如this.tipLbll，this.scoreLbl，具有代码提示效果
 * 建议：如果是页面级的逻辑，需要频繁访问页面内多个元素，使用继承式写法，如果是独立小模块，功能单一，建议用脚本方式实现，比如子弹脚本。
 */
var GameUI = /** @class */ (function (_super) {
    __extends(GameUI, _super);
    function GameUI() {
        var _this = _super.call(this) || this;
        _this._startTime = Date.now();
        new CtmMat_Frag_1.CtmSha_Frag().init();
        var pointLight = new Laya.PointLight();
        pointLight.range = 500.0;
        pointLight.intensity = 2;
        pointLight.color = new Laya.Vector3(35 / 255, 40 / 255, 200 / 255);
        var bodyCtm = new CtmMat_Frag_1.CtmMat_Frag();
        _this._cmt = bodyCtm;
        Laya.Scene3D.load("res/threeDimen/scene/PBRScene/Demo.ls", Laya.Handler.create(_this, function (scene) {
            Laya.stage.addChildAt(scene, 0);
            scene.addChild(pointLight);
            this._scenes = scene;
            var parent = scene.getChildAt(3);
            console.log(parent);
            var wepon = parent.getChildAt(1).getChildAt(0);
            Laya.Texture2D.load("res/threeDimen/scene/PBRScene/Assets/King Axe/Textures/KingAxe(Bloody)_Albedo.png", Laya.Handler.create(this, function (tex) {
                bodyCtm.Texture = tex;
            }));
            Laya.Texture2D.load("res/nor.jpg", Laya.Handler.create(this, function (tex) {
                bodyCtm.NoiseTexture = tex;
            }));
            bodyCtm.DiffsColor = new Laya.Vector4(1, 1, 1, 1);
            bodyCtm.StartTime = this._scenes["_time"] + Number.MAX_VALUE;
            wepon.meshRenderer.material = bodyCtm;
        }));
        _this.colorPicker.changeHandler = Laya.Handler.create(_this, function () {
            _this.onChangeColor(_this.colorPicker);
        }, null, false);
        _this.disBt.on(Laya.Event.CLICK, _this, function () {
            bodyCtm.StartTime = _this._scenes["_time"] + 0.3;
        });
        _this.recoveBT.on(Laya.Event.CLICK, _this, function () {
            bodyCtm.StartTime = _this._scenes["_time"] + Number.MAX_VALUE;
        });
        return _this;
    }
    GameUI.prototype.onChangeColor = function (colorPicker) {
        var arr = this.colorString2RGB(colorPicker.selectedColor).split(",");
        this._cmt.DiffsColor = new Laya.Vector4(Number(arr[0]) / 255, Number(arr[1]) / 255, Number(arr[2]) / 255, 1);
    };
    GameUI.prototype.colorString2RGB = function (value) {
        var reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/;
        var sColor = value.toLowerCase();
        if (sColor && reg.test(sColor)) {
            if (sColor.length === 4) {
                var sColorNew = "#";
                for (var i = 1; i < 4; i += 1) {
                    sColorNew += sColor.slice(i, i + 1).concat(sColor.slice(i, i + 1));
                }
                sColor = sColorNew;
            }
            //处理六位的颜色值
            var sColorChange = [];
            for (var i = 1; i < 7; i += 2) {
                sColorChange.push(parseInt("0x" + sColor.slice(i, i + 2)));
            }
            return sColorChange.join(",");
        }
        else {
            return sColor;
        }
    };
    return GameUI;
}(layaMaxUI_1.ui.test.TestSceneUI));
exports.default = GameUI;
},{"./../ui/layaMaxUI":5,"./CtmMat_Frag":3}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Scene = Laya.Scene;
var REG = Laya.ClassUtils.regClass;
var ui;
(function (ui) {
    var test;
    (function (test) {
        var TestSceneUI = /** @class */ (function (_super) {
            __extends(TestSceneUI, _super);
            function TestSceneUI() {
                return _super.call(this) || this;
            }
            TestSceneUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.loadScene("test/TestScene");
            };
            return TestSceneUI;
        }(Scene));
        test.TestSceneUI = TestSceneUI;
        REG("ui.test.TestSceneUI", TestSceneUI);
    })(test = ui.test || (ui.test = {}));
})(ui = exports.ui || (exports.ui = {}));
},{}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkU6L+WuieijheWMhS9MYXlhQWlySURFL3Jlc291cmNlcy9hcHAvbm9kZV9tb2R1bGVzL2Jyb3dzZXItcGFjay9fcHJlbHVkZS5qcyIsInNyYy9HYW1lQ29uZmlnLnRzIiwic3JjL01haW4udHMiLCJzcmMvc2NyaXB0L0N0bU1hdF9GcmFnLnRzIiwic3JjL3NjcmlwdC9HYW1lVUkudHMiLCJzcmMvdWkvbGF5YU1heFVJLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQ1ZBLGdHQUFnRztBQUNoRywwQ0FBb0M7QUFDcEM7O0VBRUU7QUFDRjtJQWFJO0lBQWMsQ0FBQztJQUNSLGVBQUksR0FBWDtRQUNJLElBQUksR0FBRyxHQUFhLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDO1FBQzdDLEdBQUcsQ0FBQyxrQkFBa0IsRUFBQyxnQkFBTSxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQWhCTSxnQkFBSyxHQUFRLEdBQUcsQ0FBQztJQUNqQixpQkFBTSxHQUFRLElBQUksQ0FBQztJQUNuQixvQkFBUyxHQUFRLFlBQVksQ0FBQztJQUM5QixxQkFBVSxHQUFRLE1BQU0sQ0FBQztJQUN6QixpQkFBTSxHQUFRLEtBQUssQ0FBQztJQUNwQixpQkFBTSxHQUFRLE1BQU0sQ0FBQztJQUNyQixxQkFBVSxHQUFLLHNCQUFzQixDQUFDO0lBQ3RDLG9CQUFTLEdBQVEsRUFBRSxDQUFDO0lBQ3BCLGdCQUFLLEdBQVMsS0FBSyxDQUFDO0lBQ3BCLGVBQUksR0FBUyxLQUFLLENBQUM7SUFDbkIsdUJBQVksR0FBUyxLQUFLLENBQUM7SUFDM0IsNEJBQWlCLEdBQVMsSUFBSSxDQUFDO0lBTTFDLGlCQUFDO0NBbEJELEFBa0JDLElBQUE7a0JBbEJvQixVQUFVO0FBbUIvQixVQUFVLENBQUMsSUFBSSxFQUFFLENBQUM7Ozs7QUN4QmxCLDJDQUFzQztBQUN0QztJQUVDO1FBRUMs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QUFHLENBQUMsQ0FBRSxDQUFFLENBQUUsQ0FBQzthQUNwRTtZQUNELE9BQU8sWUFBWSxDQUFDLElBQUksQ0FBRSxHQUFHLENBQUUsQ0FBQztTQUNuQzthQUVEO1lBQ0ksT0FBTyxNQUFNLENBQUM7U0FDakI7SUFDTCxDQUFDO0lBQ0wsYUFBQztBQUFELENBOUZBLEFBOEZDLENBOUZtQyxjQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsR0E4RnREOzs7OztBQ2xHRCxJQUFPLEtBQUssR0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO0FBQ3hCLElBQUksR0FBRyxHQUFhLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDO0FBQzdDLElBQWMsRUFBRSxDQVlmO0FBWkQsV0FBYyxFQUFFO0lBQUMsSUFBQSxJQUFJLENBWXBCO0lBWmdCLFdBQUEsSUFBSTtRQUNqQjtZQUFpQywrQkFBSztZQUlsQzt1QkFBZSxpQkFBTztZQUFBLENBQUM7WUFDdkIsb0NBQWMsR0FBZDtnQkFDSSxpQkFBTSxjQUFjLFdBQUUsQ0FBQztnQkFDdkIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1lBQ3JDLENBQUM7WUFDTCxrQkFBQztRQUFELENBVEEsQUFTQyxDQVRnQyxLQUFLLEdBU3JDO1FBVFksZ0JBQVcsY0FTdkIsQ0FBQTtRQUNELEdBQUcsQ0FBQyxxQkFBcUIsRUFBQyxXQUFXLENBQUMsQ0FBQztJQUMzQyxDQUFDLEVBWmdCLElBQUksR0FBSixPQUFJLEtBQUosT0FBSSxRQVlwQjtBQUFELENBQUMsRUFaYSxFQUFFLEdBQUYsVUFBRSxLQUFGLFVBQUUsUUFZZiIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxuICAgIH07XHJcbn0pKCk7XHJcbihmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0pKCkiLCIvKipUaGlzIGNsYXNzIGlzIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkIGJ5IExheWFBaXJJREUsIHBsZWFzZSBkbyBub3QgbWFrZSBhbnkgbW9kaWZpY2F0aW9ucy4gKi9cclxuaW1wb3J0IEdhbWVVSSBmcm9tIFwiLi9zY3JpcHQvR2FtZVVJXCJcclxuLypcclxuKiDmuLjmiI/liJ3lp4vljJbphY3nva47XHJcbiovXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdhbWVDb25maWd7XHJcbiAgICBzdGF0aWMgd2lkdGg6bnVtYmVyPTY0MDtcclxuICAgIHN0YXRpYyBoZWlnaHQ6bnVtYmVyPTExMzY7XHJcbiAgICBzdGF0aWMgc2NhbGVNb2RlOnN0cmluZz1cImZpeGVkd2lkdGhcIjtcclxuICAgIHN0YXRpYyBzY3JlZW5Nb2RlOnN0cmluZz1cIm5vbmVcIjtcclxuICAgIHN0YXRpYyBhbGlnblY6c3RyaW5nPVwidG9wXCI7XHJcbiAgICBzdGF0aWMgYWxpZ25IOnN0cmluZz1cImxlZnRcIjtcclxuICAgIHN0YXRpYyBzdGFydFNjZW5lOmFueT1cInRlc3QvVGVzdFNjZW5lLnNjZW5lXCI7XHJcbiAgICBzdGF0aWMgc2NlbmVSb290OnN0cmluZz1cIlwiO1xyXG4gICAgc3RhdGljIGRlYnVnOmJvb2xlYW49ZmFsc2U7XHJcbiAgICBzdGF0aWMgc3RhdDpib29sZWFuPWZhbHNlO1xyXG4gICAgc3RhdGljIHBoeXNpY3NEZWJ1Zzpib29sZWFuPWZhbHNlO1xyXG4gICAgc3RhdGljIGV4cG9ydFNjZW5lVG9Kc29uOmJvb2xlYW49dHJ1ZTtcclxuICAgIGNvbnN0cnVjdG9yKCl7fVxyXG4gICAgc3RhdGljIGluaXQoKXtcclxuICAgICAgICB2YXIgcmVnOiBGdW5jdGlvbiA9IExheWEuQ2xhc3NVdGlscy5yZWdDbGFzcztcclxuICAgICAgICByZWcoXCJzY3JpcHQvR2FtZVVJLnRzXCIsR2FtZVVJKTtcclxuICAgIH1cclxufVxyXG5HYW1lQ29uZmlnLmluaXQoKTsiLCJpbXBvcnQgR2FtZUNvbmZpZyBmcm9tIFwiLi9HYW1lQ29uZmlnXCI7XHJcbmNsYXNzIE1haW5cclxue1xyXG5cdGNvbnN0cnVjdG9yKClcclxuXHR7XHJcblx0XHQvL+agueaNrklEReiuvue9ruWIneWni+WMluW8leaTjlx0XHRcclxuXHRcdGlmICggd2luZG93WyBcIkxheWEzRFwiIF0gKSBMYXlhM0QuaW5pdCggR2FtZUNvbmZpZy53aWR0aCwgR2FtZUNvbmZpZy5oZWlnaHQgKTtcclxuXHRcdGVsc2UgTGF5YS5pbml0KCBHYW1lQ29uZmlnLndpZHRoLCBHYW1lQ29uZmlnLmhlaWdodCwgTGF5YVsgXCJXZWJHTFwiIF0gKTtcclxuXHRcdExheWFbIFwiUGh5c2ljc1wiIF0gJiYgTGF5YVsgXCJQaHlzaWNzXCIgXS5lbmFibGUoKTtcclxuXHRcdExheWFbIFwiRGVidWdQYW5lbFwiIF0gJiYgTGF5YVsgXCJEZWJ1Z1BhbmVsXCIgXS5lbmFibGUoKTtcclxuXHRcdExheWEuc3RhZ2Uuc2NhbGVNb2RlID0gR2FtZUNvbmZpZy5zY2FsZU1vZGU7XHJcblx0XHRMYXlhLnN0YWdlLnNjcmVlbk1vZGUgPSBHYW1lQ29uZmlnLnNjcmVlbk1vZGU7XHJcblx0XHRMYXlhLnN0YWdlLmFsaWduViA9IEdhbWVDb25maWcuYWxpZ25WO1xyXG5cdFx0TGF5YS5zdGFnZS5hbGlnbkggPSBHYW1lQ29uZmlnLmFsaWduSDtcclxuXHRcdC8v5YW85a655b6u5L+h5LiN5pSv5oyB5Yqg6L29c2NlbmXlkI7nvIDlnLrmma9cclxuXHRcdExheWEuVVJMLmV4cG9ydFNjZW5lVG9Kc29uID0gR2FtZUNvbmZpZy5leHBvcnRTY2VuZVRvSnNvbjtcclxuXHJcblx0XHQvL+aJk+W8gOiwg+ivlemdouadv++8iOmAmui/h0lEReiuvue9ruiwg+ivleaooeW8j++8jOaIluiAhXVybOWcsOWdgOWinuWKoGRlYnVnPXRydWXlj4LmlbDvvIzlnYflj6/miZPlvIDosIPor5XpnaLmnb/vvIlcclxuXHRcdGlmICggR2FtZUNvbmZpZy5kZWJ1ZyB8fCBMYXlhLlV0aWxzLmdldFF1ZXJ5U3RyaW5nKCBcImRlYnVnXCIgKSA9PSBcInRydWVcIiApIExheWEuZW5hYmxlRGVidWdQYW5lbCgpO1xyXG5cdFx0aWYgKCBHYW1lQ29uZmlnLnBoeXNpY3NEZWJ1ZyAmJiBMYXlhWyBcIlBoeXNpY3NEZWJ1Z0RyYXdcIiBdICkgTGF5YVsgXCJQaHlzaWNzRGVidWdEcmF3XCIgXS5lbmFibGUoKTtcclxuXHRcdGlmICggR2FtZUNvbmZpZy5zdGF0ICkgTGF5YS5TdGF0LnNob3coKTtcclxuXHRcdExheWEuU2hhZGVyM0QuZGVidWdNb2RlID0gdHJ1ZTtcclxuXHRcdExheWEuYWxlcnRHbG9iYWxFcnJvciA9IGZhbHNlO1xyXG5cclxuXHRcdC8v5r+A5rS76LWE5rqQ54mI5pys5o6n5Yi277yMdmVyc2lvbi5qc29u55SxSURF5Y+R5biD5Yqf6IO96Ieq5Yqo55Sf5oiQ77yM5aaC5p6c5rKh5pyJ5Lmf5LiN5b2x5ZON5ZCO57ut5rWB56iLXHJcblx0XHRMYXlhLlJlc291cmNlVmVyc2lvbi5lbmFibGUoIFwidmVyc2lvbi5qc29uXCIsIExheWEuSGFuZGxlci5jcmVhdGUoIHRoaXMsIHRoaXMub25WZXJzaW9uTG9hZGVkICksIExheWEuUmVzb3VyY2VWZXJzaW9uLkZJTEVOQU1FX1ZFUlNJT04gKTtcclxuXHR9XHJcblxyXG5cdG9uVmVyc2lvbkxvYWRlZCgpOiB2b2lkXHJcblx0e1xyXG5cdFx0Ly/mv4DmtLvlpKflsI/lm77mmKDlsITvvIzliqDovb3lsI/lm77nmoTml7blgJnvvIzlpoLmnpzlj5HnjrDlsI/lm77lnKjlpKflm77lkIjpm4bph4zpnaLvvIzliJnkvJjlhYjliqDovb3lpKflm77lkIjpm4bvvIzogIzkuI3mmK/lsI/lm75cclxuXHRcdExheWEuQXRsYXNJbmZvTWFuYWdlci5lbmFibGUoIFwiZmlsZWNvbmZpZy5qc29uXCIsIExheWEuSGFuZGxlci5jcmVhdGUoIHRoaXMsIHRoaXMub25Db25maWdMb2FkZWQgKSApO1xyXG5cdH1cclxuXHJcblx0b25Db25maWdMb2FkZWQoKTogdm9pZFxyXG5cdHtcclxuXHRcdExheWEuVVJMLmJhc2VQYXRoID0gXCJodHRwczovL2Nkbi56enpnYW1lcy5jbi9TaGFkZXJGcmFnL1wiO1xyXG5cdFx0Ly/liqDovb1JREXmjIflrprnmoTlnLrmma9cclxuXHRcdEdhbWVDb25maWcuc3RhcnRTY2VuZSAmJiBMYXlhLlNjZW5lLm9wZW4oIEdhbWVDb25maWcuc3RhcnRTY2VuZSApO1xyXG5cdH1cclxufVxyXG4vL+a/gOa0u+WQr+WKqOexu1xyXG5uZXcgTWFpbigpO1xyXG4iLCJleHBvcnQgY2xhc3MgQ3RtTWF0X0ZyYWcgZXh0ZW5kcyBMYXlhLkJsaW5uUGhvbmdNYXRlcmlhbFxyXG57XHJcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IERpZmZzQ29sb3I6IG51bWJlciA9IExheWEuU2hhZGVyM0QucHJvcGVydHlOYW1lVG9JRCggXCJ1X0RpZmZzQ29sb3JcIiApO1xyXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBUZXh0dXJlOiBudW1iZXIgPSBMYXlhLlNoYWRlcjNELnByb3BlcnR5TmFtZVRvSUQoIFwidV9UZXh0dXJlXCIgKTtcclxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgTm9pc2VUZXh0dXJlOiBudW1iZXIgPSBMYXlhLlNoYWRlcjNELnByb3BlcnR5TmFtZVRvSUQoIFwidV9Ob2lzZVRleHR1cmVcIiApO1xyXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBTdGFydFRpbWU6IG51bWJlciA9IExheWEuU2hhZGVyM0QucHJvcGVydHlOYW1lVG9JRCggXCJ1X1N0YXJ0VGltZVwiICk7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKVxyXG4gICAge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgdGhpcy5zZXRTaGFkZXJOYW1lKCBcIkN0bU1hdF9GcmFnXCIgKTtcclxuICAgICAgICB0aGlzLnJlbmRlck1vZGUgPSBMYXlhLkJsaW5uUGhvbmdNYXRlcmlhbC5SRU5ERVJNT0RFX09QQVFVRTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IERpZmZzQ29sb3IoIHZhbHVlOiBMYXlhLlZlY3RvcjQgKVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMuX3NoYWRlclZhbHVlcy5zZXRWZWN0b3IoIEN0bU1hdF9GcmFnLkRpZmZzQ29sb3IsIHZhbHVlICk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBUZXh0dXJlKCB2YWx1ZTogTGF5YS5CYXNlVGV4dHVyZSApXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5fc2hhZGVyVmFsdWVzLnNldFRleHR1cmUoIEN0bU1hdF9GcmFnLlRleHR1cmUsIHZhbHVlICk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBOb2lzZVRleHR1cmUoIHZhbHVlOiBMYXlhLkJhc2VUZXh0dXJlICkgXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5fc2hhZGVyVmFsdWVzLnNldFRleHR1cmUoIEN0bU1hdF9GcmFnLk5vaXNlVGV4dHVyZSwgdmFsdWUgKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IFN0YXJ0VGltZSggdmFsdWU6IG51bWJlciApXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5fc2hhZGVyVmFsdWVzLnNldE51bWJlciggQ3RtTWF0X0ZyYWcuU3RhcnRUaW1lLCB2YWx1ZSApO1xyXG4gICAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEN0bVNoYV9GcmFnXHJcbntcclxuICAgIHB1YmxpYyBpbml0KCk6IHZvaWRcclxuICAgIHtcclxuICAgICAgICB2YXIgYXR0cmlidXRlTWFwID0ge1xyXG4gICAgICAgICAgICBcImFfUG9zaXRpb25cIjogTGF5YS5WZXJ0ZXhNZXNoLk1FU0hfUE9TSVRJT04wLFxyXG4gICAgICAgICAgICBcImFfTm9ybWFsXCI6IExheWEuVmVydGV4TWVzaC5NRVNIX05PUk1BTDAsXHJcbiAgICAgICAgICAgICdhX1RleGNvb3JkMCc6IExheWEuVmVydGV4TWVzaC5NRVNIX1RFWFRVUkVDT09SRElOQVRFMCxcclxuICAgICAgICAgICAgJ2FfQm9uZVdlaWdodHMnOiBMYXlhLlZlcnRleE1lc2guTUVTSF9CTEVORFdFSUdIVDAsXHJcbiAgICAgICAgICAgICdhX0JvbmVJbmRpY2VzJzogTGF5YS5WZXJ0ZXhNZXNoLk1FU0hfQkxFTkRJTkRJQ0VTMFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdmFyIHVuaWZvcm1NYXAgPSB7XHJcbiAgICAgICAgICAgICd1X0JvbmVzJzogTGF5YS5TaGFkZXIzRC5QRVJJT0RfQ1VTVE9NLFxyXG4gICAgICAgICAgICAndV9NdnBNYXRyaXgnOiBMYXlhLlNoYWRlcjNELlBFUklPRF9TUFJJVEUsXHJcbiAgICAgICAgICAgICd1X1dvcmxkTWF0JzogTGF5YS5TaGFkZXIzRC5QRVJJT0RfU1BSSVRFLFxyXG4gICAgICAgICAgICAndV9Db2xvcic6IExheWEuU2hhZGVyM0QuUEVSSU9EX01BVEVSSUFMLFxyXG4gICAgICAgICAgICAndV9MaW5lV2lkdGgnOiBMYXlhLlNoYWRlcjNELlBFUklPRF9NQVRFUklBTCxcclxuICAgICAgICAgICAgJ3VfTm9pc2VUZXh0dXJlJzogTGF5YS5TaGFkZXIzRC5QRVJJT0RfTUFURVJJQUwsXHJcbiAgICAgICAgICAgICd1X1RpbWUnOiBMYXlhLlNoYWRlcjNELlBFUklPRF9TQ0VORSxcclxuICAgICAgICAgICAgJ3VfU3BlZWQnOiBMYXlhLlNoYWRlcjNELlBFUklPRF9NQVRFUklBTCxcclxuICAgICAgICAgICAgJ3VfTWFpblRleCc6IExheWEuU2hhZGVyM0QuUEVSSU9EX01BVEVSSUFMLFxyXG4gICAgICAgICAgICAndV9UZXh0dXJlJzogTGF5YS5TaGFkZXIzRC5QRVJJT0RfTUFURVJJQUwsXHJcbiAgICAgICAgICAgICd1X0Rpc3NvbHZlU3RhdGUnOiBMYXlhLlNoYWRlcjNELlBFUklPRF9NQVRFUklBTCxcclxuICAgICAgICAgICAgJ3VfU3RhcnRUaW1lJzogTGF5YS5TaGFkZXIzRC5QRVJJT0RfTUFURVJJQUwsXHJcbiAgICAgICAgICAgICd1X0RpZmZzQ29sb3InOiBMYXlhLlNoYWRlcjNELlBFUklPRF9NQVRFUklBTCxcclxuICAgICAgICB9O1xyXG4gICAgICAgIHZhciBzdGF0ZU1hcCA9IHtcclxuICAgICAgICAgICAgJ3NfQ3VsbCc6IExheWEuU2hhZGVyM0QuUkVOREVSX1NUQVRFX0NVTEwsXHJcbiAgICAgICAgICAgICdzX0JsZW5kJzogTGF5YS5TaGFkZXIzRC5SRU5ERVJfU1RBVEVfQkxFTkQsXHJcbiAgICAgICAgICAgICdzX0JsZW5kU3JjJzogTGF5YS5TaGFkZXIzRC5SRU5ERVJfU1RBVEVfQkxFTkRfU1JDLFxyXG4gICAgICAgICAgICAnc19CbGVuZERzdCc6IExheWEuU2hhZGVyM0QuUkVOREVSX1NUQVRFX0JMRU5EX0RTVCxcclxuICAgICAgICAgICAgJ3NfRGVwdGhUZXN0JzogTGF5YS5TaGFkZXIzRC5SRU5ERVJfU1RBVEVfREVQVEhfVEVTVCxcclxuICAgICAgICAgICAgJ3NfRGVwdGhXcml0ZSc6IExheWEuU2hhZGVyM0QuUkVOREVSX1NUQVRFX0RFUFRIX1dSSVRFXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgbGV0IHZzID0gYFxyXG4gICAgICAgICNpbmNsdWRlIFwiTGlnaHRpbmcuZ2xzbFwiO1xyXG4gICAgICAgIGF0dHJpYnV0ZSB2ZWM0IGFfUG9zaXRpb247XHJcbiAgICAgICAgYXR0cmlidXRlIHZlYzIgYV9UZXhjb29yZDA7XHJcbiAgICAgICAgYXR0cmlidXRlIHZlYzMgYV9Ob3JtYWw7XHJcbiAgICAgICAgdW5pZm9ybSBtYXQ0IHVfTXZwTWF0cml4O1xyXG4gICAgICAgIHVuaWZvcm0gbWF0NCB1X1dvcmxkTWF0O1xyXG4gICAgICAgIHZhcnlpbmcgdmVjMiB2X1RleGNvb3JkMDtcclxuICAgICAgICB2YXJ5aW5nIHZlYzMgdl9Ob3JtYWw7XHJcbiAgICAgICAgdW5pZm9ybSBmbG9hdCB1X1NwZWVkO1xyXG5cclxuICAgICAgICAjaWZkZWYgQk9ORVxyXG4gICAgICAgIGF0dHJpYnV0ZSB2ZWM0IGFfQm9uZUluZGljZXM7XHJcbiAgICAgICAgYXR0cmlidXRlIHZlYzQgYV9Cb25lV2VpZ2h0cztcclxuICAgICAgICBjb25zdCBpbnQgY19NYXhCb25lQ291bnQgPSAyNDtcclxuICAgICAgICB1bmlmb3JtIG1hdDQgdV9Cb25lc1tjX01heEJvbmVDb3VudF07XHJcbiAgICAgICAgI2VuZGlmXHJcblxyXG4gICAgICAgIHZvaWQgbWFpbigpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB2X1RleGNvb3JkMCA9IGFfVGV4Y29vcmQwO1xyXG4gICAgICAgICAgICAjaWZkZWYgQk9ORVxyXG4gICAgICAgICAgICBtYXQ0IHNraW5UcmFuc2Zvcm09bWF0NCgwLjApO1xyXG4gICAgICAgICAgICBza2luVHJhbnNmb3JtICs9IHVfQm9uZXNbaW50KGFfQm9uZUluZGljZXMueCldICogYV9Cb25lV2VpZ2h0cy54O1xyXG4gICAgICAgICAgICBza2luVHJhbnNmb3JtICs9IHVfQm9uZXNbaW50KGFfQm9uZUluZGljZXMueSldICogYV9Cb25lV2VpZ2h0cy55O1xyXG4gICAgICAgICAgICBza2luVHJhbnNmb3JtICs9IHVfQm9uZXNbaW50KGFfQm9uZUluZGljZXMueildICogYV9Cb25lV2VpZ2h0cy56O1xyXG4gICAgICAgICAgICBza2luVHJhbnNmb3JtICs9IHVfQm9uZXNbaW50KGFfQm9uZUluZGljZXMudyldICogYV9Cb25lV2VpZ2h0cy53O1xyXG4gICAgICAgICAgICB2ZWM0IHBvc2l0aW9uID0gc2tpblRyYW5zZm9ybSAqIGFfUG9zaXRpb247XHJcbiAgICAgICAgICAgIGdsX1Bvc2l0aW9uPXVfTXZwTWF0cml4ICogcG9zaXRpb247XHJcbiAgICAgICAgICAgIG1hdDMgd29ybGRNYXQ9bWF0Myh1X1dvcmxkTWF0ICogc2tpblRyYW5zZm9ybSk7XHJcbiAgICAgICAgICAgICNlbHNlXHJcbiAgICAgICAgICAgIGdsX1Bvc2l0aW9uPXVfTXZwTWF0cml4ICogYV9Qb3NpdGlvbjtcclxuICAgICAgICAgICAgbWF0MyB3b3JsZE1hdD1tYXQzKHVfV29ybGRNYXQpO1xyXG4gICAgICAgICAgICAjZW5kaWZcclxuICAgICAgICAgICAgdl9Ob3JtYWw9d29ybGRNYXQqYV9Ob3JtYWw7XHJcbiAgICAgICAgICAgIGdsX1Bvc2l0aW9uPXJlbWFwR0xQb3NpdGlvblooZ2xfUG9zaXRpb24pOyBcclxuICAgICAgICB9XHJcbiAgICAgICAgYDtcclxuXHJcbiAgICAgICAgbGV0IHBzID0gYFxyXG4gICAgICAgICNpZmRlZiBGU0hJR0hQUkVDSVNJT05cclxuICAgICAgICBwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XHJcbiAgICAgICAgI2Vsc2VcclxuICAgICAgICBwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDtcclxuICAgICAgICAjZW5kaWZcclxuICAgICAgICB1bmlmb3JtIHZlYzQgdV9Db2xvcjtcclxuICAgICAgICB1bmlmb3JtIHNhbXBsZXIyRCB1X01haW5UZXg7XHJcbiAgICAgICAgdmFyeWluZyB2ZWMyIHZfVGV4Y29vcmQwO1xyXG4gICAgICAgIHVuaWZvcm0gdmVjNCB1X0RpZmZzQ29sb3I7XHJcbiAgICAgICAgdW5pZm9ybSBzYW1wbGVyMkQgdV9UZXh0dXJlO1xyXG4gICAgICAgIHVuaWZvcm0gc2FtcGxlcjJEIHVfTm9pc2VUZXh0dXJlO1xyXG4gICAgICAgIGZsb2F0IGVkZ2VXaWR0aCA9IDAuMDE7XHJcbiAgICAgICAgdW5pZm9ybSBmbG9hdCB1X1RpbWU7XHJcbiAgICAgICAgdW5pZm9ybSBmbG9hdCB1X1N0YXJ0VGltZTtcclxuICAgICAgICBmbG9hdCBEaXNzb2x2ZVNwZWVkID0gNS4wO1xyXG4gICAgICAgIHZlYzQgRWRnZUNvbG9yO1xyXG4gICAgICAgIHZlYzQgbGVycCh2ZWM0IGZyb20sdmVjNCB0bywgZmxvYXQgdCApXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0ID0gbWF4KDAuMCwgbWluKDEuMCwgdCkpO1xyXG4gICAgICAgICAgICB2ZWM0IHRtcDtcclxuICAgICAgICAgICAgdG1wLnggPSBmcm9tLnggKyAoIHRvLnggLSBmcm9tLnggKSAqIHQ7XHJcbiAgICAgICAgICAgIHRtcC55ID0gZnJvbS55ICsgKCB0by55IC0gZnJvbS55ICkgKiB0O1xyXG4gICAgICAgICAgICB0bXAueiA9IGZyb20ueiArICggdG8ueiAtIGZyb20ueiApICogdDtcclxuICAgICAgICAgICAgdG1wLncgPSBmcm9tLncgKyAoIHRvLncgLSBmcm9tLncgKSAqIHQ7XHJcbiAgICAgICAgICAgIHJldHVybiB0bXA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZsb2F0IHNhdHVyYXRlKGZsb2F0IHgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gbWF4KDAuMCwgbWluKDEuMCwgeCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2b2lkIG1haW4oKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZmxvYXQgRGlzc29sdmVGYWN0b3IgPSBzYXR1cmF0ZSgodV9UaW1lIC0gdV9TdGFydFRpbWUpIC8gRGlzc29sdmVTcGVlZCk7XHJcbiAgICAgICAgICAgIGZsb2F0IG5vaXNlVmFsdWUgPSB0ZXh0dXJlMkQodV9Ob2lzZVRleHR1cmUsdl9UZXhjb29yZDApLnI7ICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmKG5vaXNlVmFsdWUgPD0gRGlzc29sdmVGYWN0b3IpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGRpc2NhcmQ7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdsX0ZyYWdDb2xvciA9IHRleHR1cmUyRCh1X1RleHR1cmUsdl9UZXhjb29yZDApICogdV9EaWZmc0NvbG9yO1xyXG4gICAgICAgIH1cclxuICAgICAgICBgO1xyXG5cclxuICAgICAgICB2YXIgY3VzdG9tU2hhZGVyID0gTGF5YS5TaGFkZXIzRC5hZGQoIFwiQ3RtTWF0X0ZyYWdcIiApO1xyXG4gICAgICAgIHZhciBzdWJTaGFkZXIgPSBuZXcgTGF5YS5TdWJTaGFkZXIoIGF0dHJpYnV0ZU1hcCwgdW5pZm9ybU1hcCwgTGF5YS5Ta2lubmVkTWVzaFNwcml0ZTNELnNoYWRlckRlZmluZXMsIExheWEuQmxpbm5QaG9uZ01hdGVyaWFsLnNoYWRlckRlZmluZXMgKTtcclxuICAgICAgICBjdXN0b21TaGFkZXIuYWRkU3ViU2hhZGVyKCBzdWJTaGFkZXIgKTtcclxuICAgICAgICBzdWJTaGFkZXIuYWRkU2hhZGVyUGFzcyggdnMsIHBzLCBzdGF0ZU1hcCApO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgdWkgfSBmcm9tIFwiLi8uLi91aS9sYXlhTWF4VUlcIjtcclxuaW1wb3J0IHsgQ3RtTWF0X0ZyYWcsIEN0bVNoYV9GcmFnIH0gZnJvbSBcIi4vQ3RtTWF0X0ZyYWdcIjtcclxuLyoqXHJcbiAqIOacrOekuuS+i+mHh+eUqOmdnuiEmuacrOeahOaWueW8j+WunueOsO+8jOiAjOS9v+eUqOe7p+aJv+mhtemdouWfuuexu++8jOWunueOsOmhtemdoumAu+i+keOAguWcqElERemHjOmdouiuvue9ruWcuuaZr+eahFJ1bnRpbWXlsZ7mgKfljbPlj6/lkozlnLrmma/ov5vooYzlhbPogZRcclxuICog55u45q+U6ISa5pys5pa55byP77yM57un5om/5byP6aG16Z2i57G777yM5Y+v5Lul55u05o6l5L2/55So6aG16Z2i5a6a5LmJ55qE5bGe5oCn77yI6YCa6L+HSURF5YaFdmFy5bGe5oCn5a6a5LmJ77yJ77yM5q+U5aaCdGhpcy50aXBMYmxs77yMdGhpcy5zY29yZUxibO+8jOWFt+acieS7o+eggeaPkOekuuaViOaenFxyXG4gKiDlu7rorq7vvJrlpoLmnpzmmK/pobXpnaLnuqfnmoTpgLvovpHvvIzpnIDopoHpopHnuYHorr/pl67pobXpnaLlhoXlpJrkuKrlhYPntKDvvIzkvb/nlKjnu6fmib/lvI/lhpnms5XvvIzlpoLmnpzmmK/ni6znq4vlsI/mqKHlnZfvvIzlip/og73ljZXkuIDvvIzlu7rorq7nlKjohJrmnKzmlrnlvI/lrp7njrDvvIzmr5TlpoLlrZDlvLnohJrmnKzjgIJcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdhbWVVSSBleHRlbmRzIHVpLnRlc3QuVGVzdFNjZW5lVUlcclxue1xyXG4gICAgcHJpdmF0ZSBfY210OiBDdG1NYXRfRnJhZztcclxuXHJcbiAgICBwcml2YXRlIF9zdGFydFRpbWU6IG51bWJlcjtcclxuICAgIHByaXZhdGUgX3NjZW5lczogTGF5YS5TY2VuZTNEO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKClcclxuICAgIHtcclxuICAgICAgICBzdXBlcigpO1xyXG5cclxuICAgICAgICB0aGlzLl9zdGFydFRpbWUgPSBEYXRlLm5vdygpO1xyXG5cclxuICAgICAgICBuZXcgQ3RtU2hhX0ZyYWcoKS5pbml0KCk7XHJcblxyXG4gICAgICAgIHZhciBwb2ludExpZ2h0ID0gbmV3IExheWEuUG9pbnRMaWdodCgpIGFzIExheWEuUG9pbnRMaWdodDtcclxuICAgICAgICBwb2ludExpZ2h0LnJhbmdlID0gNTAwLjA7XHJcbiAgICAgICAgcG9pbnRMaWdodC5pbnRlbnNpdHkgPSAyO1xyXG4gICAgICAgIHBvaW50TGlnaHQuY29sb3IgPSBuZXcgTGF5YS5WZWN0b3IzKCAzNSAvIDI1NSwgNDAgLyAyNTUsIDIwMCAvIDI1NSApO1xyXG5cclxuICAgICAgICBsZXQgYm9keUN0bTogQ3RtTWF0X0ZyYWcgPSBuZXcgQ3RtTWF0X0ZyYWcoKTtcclxuICAgICAgICB0aGlzLl9jbXQgPSBib2R5Q3RtO1xyXG4gICAgICAgIExheWEuU2NlbmUzRC5sb2FkKCBcInJlcy90aHJlZURpbWVuL3NjZW5lL1BCUlNjZW5lL0RlbW8ubHNcIiwgTGF5YS5IYW5kbGVyLmNyZWF0ZSggdGhpcywgZnVuY3Rpb24gKCBzY2VuZTogTGF5YS5TY2VuZTNEICk6IHZvaWRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIExheWEuc3RhZ2UuYWRkQ2hpbGRBdCggc2NlbmUsIDAgKTtcclxuICAgICAgICAgICAgc2NlbmUuYWRkQ2hpbGQoIHBvaW50TGlnaHQgKTtcclxuICAgICAgICAgICAgdGhpcy5fc2NlbmVzID0gc2NlbmU7XHJcblxyXG4gICAgICAgICAgICBsZXQgcGFyZW50OiBMYXlhLlNwcml0ZTNEID0gc2NlbmUuZ2V0Q2hpbGRBdCggMyApIGFzIGFueTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coIHBhcmVudCApO1xyXG4gICAgICAgICAgICBsZXQgd2Vwb246IExheWEuTWVzaFNwcml0ZTNEID0gcGFyZW50LmdldENoaWxkQXQoIDEgKS5nZXRDaGlsZEF0KCAwICkgYXMgTGF5YS5NZXNoU3ByaXRlM0Q7XHJcbiAgICAgICAgICAgIExheWEuVGV4dHVyZTJELmxvYWQoIFwicmVzL3RocmVlRGltZW4vc2NlbmUvUEJSU2NlbmUvQXNzZXRzL0tpbmcgQXhlL1RleHR1cmVzL0tpbmdBeGUoQmxvb2R5KV9BbGJlZG8ucG5nXCIsIExheWEuSGFuZGxlci5jcmVhdGUoIHRoaXMsICggdGV4ICkgPT5cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgYm9keUN0bS5UZXh0dXJlID0gdGV4O1xyXG4gICAgICAgICAgICB9ICkgKTtcclxuICAgICAgICAgICAgTGF5YS5UZXh0dXJlMkQubG9hZCggXCJyZXMvbm9yLmpwZ1wiLCBMYXlhLkhhbmRsZXIuY3JlYXRlKCB0aGlzLCAoIHRleCApID0+XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGJvZHlDdG0uTm9pc2VUZXh0dXJlID0gdGV4O1xyXG4gICAgICAgICAgICB9ICkgKTtcclxuICAgICAgICAgICAgYm9keUN0bS5EaWZmc0NvbG9yID0gbmV3IExheWEuVmVjdG9yNCggMSwgMSwgMSwgMSApO1xyXG4gICAgICAgICAgICBib2R5Q3RtLlN0YXJ0VGltZSA9IHRoaXMuX3NjZW5lc1sgXCJfdGltZVwiIF0gKyBOdW1iZXIuTUFYX1ZBTFVFO1xyXG4gICAgICAgICAgICB3ZXBvbi5tZXNoUmVuZGVyZXIubWF0ZXJpYWwgPSBib2R5Q3RtO1xyXG4gICAgICAgIH0gKSApO1xyXG5cclxuICAgICAgICB0aGlzLmNvbG9yUGlja2VyLmNoYW5nZUhhbmRsZXIgPSBMYXlhLkhhbmRsZXIuY3JlYXRlKCB0aGlzLCAoKSA9PlxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5vbkNoYW5nZUNvbG9yKCB0aGlzLmNvbG9yUGlja2VyICk7XHJcbiAgICAgICAgfSwgbnVsbCwgZmFsc2UgKTtcclxuXHJcbiAgICAgICAgdGhpcy5kaXNCdC5vbiggTGF5YS5FdmVudC5DTElDSywgdGhpcywgKCkgPT5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGJvZHlDdG0uU3RhcnRUaW1lID0gdGhpcy5fc2NlbmVzWyBcIl90aW1lXCIgXSArIDAuMztcclxuICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgIHRoaXMucmVjb3ZlQlQub24oIExheWEuRXZlbnQuQ0xJQ0ssIHRoaXMsICgpID0+XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBib2R5Q3RtLlN0YXJ0VGltZSA9IHRoaXMuX3NjZW5lc1sgXCJfdGltZVwiIF0gKyBOdW1iZXIuTUFYX1ZBTFVFO1xyXG4gICAgICAgIH0gKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG9uQ2hhbmdlQ29sb3IoIGNvbG9yUGlja2VyOiBMYXlhLkNvbG9yUGlja2VyICk6IHZvaWRcclxuICAgIHtcclxuICAgICAgICBsZXQgYXJyID0gdGhpcy5jb2xvclN0cmluZzJSR0IoIGNvbG9yUGlja2VyLnNlbGVjdGVkQ29sb3IgKS5zcGxpdCggXCIsXCIgKTtcclxuICAgICAgICB0aGlzLl9jbXQuRGlmZnNDb2xvciA9IG5ldyBMYXlhLlZlY3RvcjQoIE51bWJlciggYXJyWyAwIF0gKSAvIDI1NSwgTnVtYmVyKCBhcnJbIDEgXSApIC8gMjU1LCBOdW1iZXIoIGFyclsgMiBdICkgLyAyNTUsIDEgKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY29sb3JTdHJpbmcyUkdCKCB2YWx1ZTogc3RyaW5nICk6IHN0cmluZ1xyXG4gICAge1xyXG4gICAgICAgIHZhciByZWcgPSAvXiMoWzAtOWEtZkEtZl17M318WzAtOWEtZkEtZl17Nn0pJC87XHJcbiAgICAgICAgdmFyIHNDb2xvciA9IHZhbHVlLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgaWYgKCBzQ29sb3IgJiYgcmVnLnRlc3QoIHNDb2xvciApIClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmICggc0NvbG9yLmxlbmd0aCA9PT0gNCApXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHZhciBzQ29sb3JOZXcgPSBcIiNcIjtcclxuICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMTsgaSA8IDQ7IGkgKz0gMSApXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgc0NvbG9yTmV3ICs9IHNDb2xvci5zbGljZSggaSwgaSArIDEgKS5jb25jYXQoIHNDb2xvci5zbGljZSggaSwgaSArIDEgKSApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgc0NvbG9yID0gc0NvbG9yTmV3O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8v5aSE55CG5YWt5L2N55qE6aKc6Imy5YC8XHJcbiAgICAgICAgICAgIHZhciBzQ29sb3JDaGFuZ2UgPSBbXTtcclxuICAgICAgICAgICAgZm9yICggdmFyIGkgPSAxOyBpIDwgNzsgaSArPSAyIClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc0NvbG9yQ2hhbmdlLnB1c2goIHBhcnNlSW50KCBcIjB4XCIgKyBzQ29sb3Iuc2xpY2UoIGksIGkgKyAyICkgKSApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBzQ29sb3JDaGFuZ2Uuam9pbiggXCIsXCIgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHNDb2xvcjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCIvKipUaGlzIGNsYXNzIGlzIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkIGJ5IExheWFBaXJJREUsIHBsZWFzZSBkbyBub3QgbWFrZSBhbnkgbW9kaWZpY2F0aW9ucy4gKi9cbmltcG9ydCBWaWV3PUxheWEuVmlldztcclxuaW1wb3J0IERpYWxvZz1MYXlhLkRpYWxvZztcclxuaW1wb3J0IFNjZW5lPUxheWEuU2NlbmU7XG52YXIgUkVHOiBGdW5jdGlvbiA9IExheWEuQ2xhc3NVdGlscy5yZWdDbGFzcztcbmV4cG9ydCBtb2R1bGUgdWkudGVzdCB7XHJcbiAgICBleHBvcnQgY2xhc3MgVGVzdFNjZW5lVUkgZXh0ZW5kcyBTY2VuZSB7XHJcblx0XHRwdWJsaWMgY29sb3JQaWNrZXI6TGF5YS5Db2xvclBpY2tlcjtcblx0XHRwdWJsaWMgZGlzQnQ6TGF5YS5CdXR0b247XG5cdFx0cHVibGljIHJlY292ZUJUOkxheWEuQnV0dG9uO1xuICAgICAgICBjb25zdHJ1Y3RvcigpeyBzdXBlcigpfVxyXG4gICAgICAgIGNyZWF0ZUNoaWxkcmVuKCk6dm9pZCB7XHJcbiAgICAgICAgICAgIHN1cGVyLmNyZWF0ZUNoaWxkcmVuKCk7XHJcbiAgICAgICAgICAgIHRoaXMubG9hZFNjZW5lKFwidGVzdC9UZXN0U2NlbmVcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgUkVHKFwidWkudGVzdC5UZXN0U2NlbmVVSVwiLFRlc3RTY2VuZVVJKTtcclxufVxyIl19
